@baseUrl = http://localhost:4004

### ------------------------------------------------------------------------
# Get Service Document
GET {{baseUrl}}/admin

### ------------------------------------------------------------------------
# Get Service Metadata Document
GET {{baseUrl}}/admin/$metadata

### ------------------------------------------------------------------------
# Get all books
GET {{baseUrl}}/admin/Books

### ------------------------------------------------------------------------
# Get all authors
GET {{baseUrl}}/admin/Authors

### ------------------------------------------------------------------------
# Get Service Metadata Document
GET {{baseUrl}}/admin/$metadata

### ------------------------------------------------------------------------
# Get all books with inlined author
GET {{baseUrl}}/admin/Books?$expand=author

### ------------------------------------------------------------------------
# Get all authors with inlined books
GET {{baseUrl}}/admin/Authors?$expand=books

### ------------------------------------------------------------------------
# Get all books with language en
# with inlined publication country and currency
GET {{baseUrl}}/admin/Books?$expand=publCountry,price_currency
Accept-Language: en


### ------------------------------------------------------------------------
# Get all books with language de
# with inlined publication country and currency
GET {{baseUrl}}/admin/Books?$expand=publCountry,price_currency
Accept-Language: de


### ------------------------------------------------------------------------
# Get all authors with language en
# with inlined epoch
GET {{baseUrl}}/admin/Authors?$expand=epoch
Accept-Language: en


### ------------------------------------------------------------------------
# Get all authors with language de
# with inlined epoch
GET {{baseUrl}}/admin/Authors?$expand=epoch
Accept-Language: de

### ------------------------------------------------------------------------
# Create a new author with empty name and invalid epoch ID
POST {{baseUrl}}/admin/Authors

Content-Type: application/json
{
  "name": "",
  "dateOfBirth": "1759-11-10",
  "dateOfDeath": "1805-05-09",  
  "epoch": {"ID": 190}
}

### ------------------------------------------------------------------------
# Create a new book with empty title, invalid author ID and invalid genre
POST {{baseUrl}}/admin/Books

Content-Type: application/json
{
  "title": "",
  "author_ID": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
  "genre": 3
}

### ------------------------------------------------------------------------
# Create a new book with empty title, invalid genre and without author
POST {{baseUrl}}/admin/Books

Content-Type: application/json
{
  "title": "",
  "genre": 3
}

### ------------------------------------------------------------------------
# Create a new author
# ... and assign the ID of the newly created author to the variable authorID
# @name createNewAuthor
POST {{baseUrl}}/admin/Authors

Content-Type: application/json
{
  "name": "Initial Version"
}

###
@authorID = {{createNewAuthor.response.body.$.ID}}

### Read the newly created author for editing a first time
# ... and assign the received ETag to the variable ETag1
GET {{baseUrl}}/admin/Authors({{authorID}})

###
@ETag1 = {{createNewAuthor.response.headers.ETag}}

### Read the newly created author for editing a second time
# ... and assign the received ETag to the variable ETag2
GET {{baseUrl}}/admin/Authors({{authorID}})

###
@ETag2 = {{createNewAuthor.response.headers.ETag}}

#   ETag1 and Etag2 match because no changes have been made yet.

### ------------------------------------------------------------------------
# Update the newly created author using ETag1 received 
# when the Author was first read.
# The update implicitly creates a new ETag value.
PUT {{baseUrl}}/admin/Authors({{authorID}})
If-Match: {{ETag1}}
Content-Type: application/json

{
  "name": "Update 1 of Initial Version"
}

### ------------------------------------------------------------------------
# Try another update using ETag2 received
# when the author was read for the second time.
# This will fail with a HTTP status code 412 Precondition Failed.
PUT {{baseUrl}}/admin/Authors({{authorID}})
If-Match: {{ETag2}}
Content-Type: application/json

{
  "name": "Update 2 of Initial Version"
}

### ------------------------------------------------------------------------
# Get Service Document
GET {{baseUrl}}/cat


### ------------------------------------------------------------------------
# Get Service Metadata Document
GET {{baseUrl}}/cat/$metadata


### ------------------------------------------------------------------------
# Get all books with language en
GET {{baseUrl}}/cat/Books
Accept-Language: en


### ------------------------------------------------------------------------
# Get all books with language de
GET {{baseUrl}}/cat/Books
Accept-Language: de


### ------------------------------------------------------------------------
# Get all authors with language en
GET {{baseUrl}}/cat/Authors
Accept-Language: en


### ------------------------------------------------------------------------
# Get all authors with language de
GET {{baseUrl}}/cat/Authors
Accept-Language: de


### ------------------------------------------------------------------------
# Create a new author
POST {{baseUrl}}/cat/Authors
Content-Type: application/json

{
  "name": "Friedrich Schiller",
  "dateOfBirth": "1759-11-10",
  "dateOfDeath": "1805-05-09",
  "epoch": {"ID": 120}
}

### ------------------------------------------------------------------------
# Create a new author with the date of death before the date of birth.
POST {{baseUrl}}/admin/Authors
Content-Type: application/json

{
  "name": "Friedrich Schiller",
  "dateOfBirth": "1759-11-10",
  "dateOfDeath": "1705-05-09", 
  "epoch": {"ID": 120}
}

### ------------------------------------------------------------------------
# Get all books
GET {{baseUrl}}/cat/Books